import logging
import os
import asyncio

from aiogram import Bot, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message

from src.core.dependencies import admin_ids, mailing_service
from pyrogram.types import InputMediaPhoto, InputMediaVideo
from src.models.models import Mailing
from src.views.keyboards.inline_keyboard import (
    get_mailing_selection_keyboard,
    get_test_mailing_keyboard,
)

router = Router()


class DebugStates(StatesGroup):
    select_mailing_for_test = State()


async def send_test_mailing(
    mailing: Mailing,
    bot: Bot,
    userbots: dict,
):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ."""
    logging.info(f"–ù–∞—á–∞–ª–æ –¢–ï–°–¢–û–í–û–ô —Ä–∞—Å—Å—ã–ª–∫–∏: {mailing.name} (ID: {mailing.id})")

    target_chats = mailing.chat_ids
    userbot_name = mailing.userbot_name
    userbot = userbots.get(userbot_name)

    if not userbot or not userbot.client or not userbot.client.is_connected:
        error_msg = f"–Æ–∑–µ—Ä–±–æ—Ç {userbot_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏."
        logging.error(error_msg)
        for admin_id in admin_ids:
            await bot.send_message(admin_id, f"‚ùå –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ '{mailing.name}' –Ω–µ —É–¥–∞–ª–∞—Å—å. {error_msg}")
        return

    sent_count = 0
    failed_count = 0

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∫–∞–∫ –≤ –ø—Ä–æ–¥–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ: —Ç–µ–∫—Å—Ç –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å –∫ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–µ
    package_path = os.path.join("msg", mailing.name)
    text = ""
    media_group: list[InputMediaPhoto | InputMediaVideo] = []

    if os.path.isdir(package_path):
        files = sorted(os.listdir(package_path))
        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—Å—Ç
        text_files = [f for f in files if f.lower().endswith(".txt")]
        if text_files:
            try:
                with open(os.path.join(package_path, text_files[0]), "r", encoding="utf-8") as f:
                    text = f.read()
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–µ—Å—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ '{mailing.name}': {e}")

        # –°–æ–±–∏—Ä–∞–µ–º —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ
        for f in files:
            lower = f.lower()
            full_path = os.path.join(package_path, f)
            if lower.endswith((".png", ".jpg", ".jpeg", ".webp")):
                media_group.append(InputMediaPhoto(full_path))
            elif lower.endswith((".mp4", ".mov", ".mkv", ".webm")):
                media_group.append(InputMediaVideo(full_path))

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
        if media_group and text:
            first = media_group[0]
            if isinstance(first, InputMediaPhoto):
                media_group[0] = InputMediaPhoto(first.media, caption=text)
            elif isinstance(first, InputMediaVideo):
                media_group[0] = InputMediaVideo(first.media, caption=text)

    for chat in target_chats:
        # –ì–æ—Ç–æ–≤–∏–º –∫–∞–Ω–¥–∏–¥–∞—Ç—ã ID: –∏—Å—Ö–æ–¥–Ω—ã–π, –∞ –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª ‚Äî —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º -100 –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞
        candidates: list[object] = []
        try:
            as_int = int(chat)
            candidates.append(as_int)
            if as_int < -1000 and not str(as_int).startswith("-100"):
                candidates.append(int("-100" + str(abs(as_int))))
        except Exception:
            candidates.append(chat)

        delivered = False
        last_error: Exception | None = None
        for candidate in candidates:
            try:
                # –†–µ–∑–æ–ª–≤–∏–º –ø–∏—Ä–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å Peer id invalid
                try:
                    await userbot.client.resolve_peer(candidate)
                except Exception:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —á–∞—Ç (–∏–Ω–æ–≥–¥–∞ –ø–æ–º–æ–≥–∞–µ—Ç –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø)
                    await userbot.client.get_chat(candidate)

                if media_group:
                    await userbot.client.send_media_group(candidate, media_group)
                elif text:
                    await userbot.client.send_message(candidate, text)
                else:
                    # –§–æ–ª–ª–±–µ–∫: –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –∏ —Ç–µ–∫—Å—Ç–∞
                    await userbot.client.send_message(
                        candidate, f"üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ '{mailing.name}'"
                    )
                sent_count += 1
                logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ—Å—Ç) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {candidate} –æ—Ç {userbot_name}")
                delivered = True
                break
            except Exception as e:
                last_error = e

        if not delivered:
            failed_count += 1
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {chat}: {last_error}")

    logging.info(f"–¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ '{mailing.name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    admin_message = (
        f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ '{mailing.name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n"
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"–û—à–∏–±–æ–∫: {failed_count}"
    )
    for admin_id in admin_ids:
        await bot.send_message(admin_id, admin_message)


@router.message(Command("debug_mail"))
async def debug_start(message: Message):
    if message.from_user.id not in admin_ids:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    await message.answer(
        "–ü–∞–Ω–µ–ª—å –æ—Ç–ª–∞–¥–∫–∏. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.",
        reply_markup=get_test_mailing_keyboard(),
    )


@router.callback_query(F.data == "test_mailing")
async def select_mailing_for_test(callback: CallbackQuery, state: FSMContext):
    mailings = mailing_service.get_all_mailings()
    if not mailings:
        await callback.message.edit_text("–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∞.")
        await callback.answer()
        return

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:",
        reply_markup=get_mailing_selection_keyboard(mailings),
    )
    await state.set_state(DebugStates.select_mailing_for_test)
    await callback.answer()


@router.callback_query(DebugStates.select_mailing_for_test, F.data.startswith("mailing_"))
async def process_test_mailing(
    callback: CallbackQuery,
    state: FSMContext,
    bot: Bot,
    userbots: dict,
):
    # –°–Ω–∞—á–∞–ª–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ç–∞–π–º–∞—É—Ç–∞ Telegram
    try:
        await callback.answer("–¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞.")
    except Exception:
        pass

    await callback.message.edit_text("–ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    mailing_id = int(callback.data.split("_")[1])
    mailing = mailing_service.get_mailing(mailing_id)

    if not userbots:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –Æ–∑–µ—Ä–±–æ—Ç—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
        await state.clear()
        return

    if not mailing:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    asyncio.create_task(send_test_mailing(mailing, bot, userbots))
    await state.clear()